# -*- coding: utf-8 -*-
"""simulation_ising.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1u-tzT2NWMIYDzA15cuqsflQ3m-dZ8ou4
"""

# Monte Carlo Simulation
import numpy as np
import random

def initialize_lattice(L):
  """ Initialize the lattice with spins """
  return np.ones((L, L))

def calculate_energy(lattice, i, j, J=1):
  """ Calculate the energy contribution of a spin """
  L = lattice.shape[0]
  total = 0

  for di, dj in [(-1, 0), (1, 0), (0, 1), (0, -1)]:
    ni, nj = (i + di) % L, (j + dj) % L
    total -= J * lattice[i, j] * lattice[ni, nj]

  return total

def metropolis_step(lattice, beta):
  """ Perform one Metropolis-Hastings step """
  L = lattice.shape[0]
  i, j = np.random.randint(L), np.random.randint(L)
  deltaE = -2 * calculate_energy(lattice, i, j)

  if deltaE < 0 or np.random.rand() < np.exp(-beta * deltaE):
    lattice[i, j] *= -1

def run_simulation(L, T_min, T_max, thermal_equilibrium, num_samples):
  lattice = initialize_lattice(L)
  lattice_samples = []
  magnetization_samples = []

  # Ferromagnetic case
  tempetures = np.linspace(T_min, T_max, num_samples)
  for T in tempetures:
    beta = 1/T

    # Reach thermal equilibrium
    for _ in range(thermal_equilibrium):
      metropolis_step(lattice, beta)

    # Sample the configuration
    for _ in range(10):
      metropolis_step(lattice, beta)

    lattice_samples.append(lattice.copy())
    magnetization_samples.append(np.mean(lattice))

  return lattice_samples, magnetization_samples