# -*- coding: utf-8 -*-
"""vae_definition_conditional.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ce6GEt2s9Nc5JODgf1VxrsaYoFSGDQEf
"""

import torch
from torch import nn

# Modify VAE for Conditional Generation
class ConditionalVariationalAutoEncoder(nn.Module):
  def __init__(self, input_dim, label_dim, h_dim = 200, z_dim = 20):
    super().__init__()
    # encoder
    self.img_2hid = nn.Linear(input_dim + label_dim, h_dim)
    self.hid_2mu = nn.Linear(h_dim, z_dim)
    self.hid_2sigma = nn.Linear(h_dim, z_dim)

    # decoder
    self.z_2hid = nn.Linear(z_dim + label_dim, h_dim)
    self.hid_2img = nn.Linear(h_dim, input_dim)

    self.relu = nn.ReLU()

  def encode(self, x, label):
    # q_phi(z|x)
    h = self.relu(self.img_2hid(torch.cat([x, label], dim=1)))
    mu, sigma = self.hid_2mu(h), self.hid_2sigma(h)
    return mu, sigma

  def decode(self, z, label):
    # p_theta(x|z)
    h = self.relu(self.z_2hid(torch.cat([z, label], dim=1)))
    return torch.sigmoid(self.hid_2img(h))

  def forward(self, x, label):
    mu, sigma = self.encode(x, label)
    epsilon = torch.randn_like(sigma)
    z_reparametrized = mu + sigma * epsilon
    x_reconstructed = self.decode(z_reparametrized, label)
    return x_reconstructed, mu, sigma